name: DynamoDB Dump to S3 and DynamoDB

on:
  workflow_dispatch:
    inputs:
      all_or_custom:
        description: Backup all or custom tables
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - custom
      custom_tables:
        description: Custom table names
        required: false
      environment:
        description: Environment
        required: true
        default: 'uat'
      s3_bucket:
        description: Name of s3 bucket
        required: true

jobs:
  dynamodb-backup:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: 'eu-north-1'  

    steps:
      - name: Set AWS Credentials
        id: set-aws-creds
        run: |
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "::add-mask::${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
            echo "::add-mask::${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
            echo "::add-mask::${{ secrets.AWS_ACCESS_KEY_ID_QA }}"
            echo "::add-mask::${{ secrets.AWS_SECRET_ACCESS_KEY_QA }}"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_QA }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_QA }}" >> $GITHUB_ENV
          else
            echo "::add-mask::${{ secrets.AWS_ACCESS_KEY_ID_UAT }}"
            echo "::add-mask::${{ secrets.AWS_SECRET_ACCESS_KEY_UAT }}"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_UAT }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_UAT }}" >> $GITHUB_ENV
          fi

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y

      - name: Determine Tables to Backup
        id: determine-tables
        run: |
          if [ "${{ github.event.inputs.all_or_custom }}" == "all" ]; then
            # List all DynamoDB tables
            TABLES=$(aws dynamodb list-tables --query "TableNames[]" --output text)
          elif [ "${{ github.event.inputs.all_or_custom }}" == "custom" ]; then
            if [ -z "${{ github.event.inputs.custom_tables }}" ]; then
              echo "Error: custom_tables input is required when 'custom' is selected."
              exit 1
            fi
            # Use the provided custom tables, split by comma and remove spaces
            TABLES=$(echo "${{ github.event.inputs.custom_tables }}" | tr ',' ' ')
          fi
          echo "TABLES=$TABLES" >> $GITHUB_ENV
          echo "Tables selected for backup: $TABLES"

      - name: Dump DynamoDB Tables to S3 and DynamoDB
        run: |
          BACKUP_DATE=$(date +%F-%H-%M-%S)
          
          for TABLE in $TABLES
          do
            TABLE_ARN=$(aws dynamodb describe-table --table-name $TABLE --query "Table.TableArn" --output text)
            echo "Exporting table $TABLE (ARN: $TABLE_ARN) to S3 in folder $BACKUP_DATE"

            #Dynamo to s3
            aws dynamodb export-table-to-point-in-time \
              --table-arn $TABLE_ARN \
              --s3-bucket "${{ github.event.inputs.s3_bucket }}" \
              --s3-prefix "${BACKUP_DATE}/${{ github.event.inputs.environment }}-backup/$TABLE" \
              --export-format DYNAMODB_JSON

            #Dynamo to Dynamo itself
            BACKUP_NAME="${{ github.event.inputs.environment }}-${TABLE}-backup-${BACKUP_DATE}"
            echo "Creating an on-demand backup of table $TABLE with backup name $BACKUP_NAME"
            
            aws dynamodb create-backup \
              --table-name $TABLE \
              --backup-name "$BACKUP_NAME"
          done
